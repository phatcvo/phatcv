<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Book on </title>
    <link>https://phatcvo.github.io/tags/book/</link>
    <description>Recent content in Book on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://phatcvo.github.io/tags/book/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Book] Clean Code - Chapter 1</title>
      <link>https://phatcvo.github.io/blog/clean-code-chapter-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://phatcvo.github.io/blog/clean-code-chapter-1/</guid>
      <description>CHƯƠNG 1: CODE SẠCH Bạn đang đọc quyển sách này vì hai lý do. Thứ nhất, bạn là một lập trình viên. Thứ hai, bạn muốn trở thành một lập trình viên giỏi. Tuyệt vời! Chúng tôi cần lập trình viên giỏi.&#xA;Đây là một quyển sách nói về cách để bạn code tốt hơn, và nó chứa đầy code. Chúng ta sẽ xem xét code từ nhiều phương diện, từ trên xuống dưới, từ dưới lên trên, và từ trong ra ngoài.</description>
    </item>
    <item>
      <title>[Book] Clean Code - Chapter 10</title>
      <link>https://phatcvo.github.io/blog/clean-code-chapter-10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://phatcvo.github.io/blog/clean-code-chapter-10/</guid>
      <description>Lớp bởi Jeff Langr Cho đến nay trong cuốn sách này, chúng ta đã tập trung vào cách viết tốt các dòng và khối mã. Đi sâu vào thành phần thích hợp của các chức năng và cách chúng tương tác với nhau. Nhưng sau tất cả, sự chú ý đến tính biểu đạt của các câu lệnh và các chức năng mà chúng bao gồm, vẫn chưa có mã sạch cho đến khi quan tâm đến các cấp tổ chức mã cao hơn.</description>
    </item>
    <item>
      <title>[Book] Clean Code - Chapter 11</title>
      <link>https://phatcvo.github.io/blog/clean-code-chapter-11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://phatcvo.github.io/blog/clean-code-chapter-11/</guid>
      <description>Hệ thống bởi Tiến sĩ Kevin Dean Wampler “Loại bỏ sự phức tạp. Nó bòn rút sự sống của các nhà phát triển, khiến các sản phẩm khó lên kế hoạch, xây dựng và thử nghiệm ”. —Ray Ozzie, CTO, Microsoft Corporation&#xA;Bạn sẽ xây dựng một thành phố như thế nào? Bạn có thể tự quản lý tất cả các chi tiết? Chắc là không. Ngay cả việc quản lý một thành phố hiện tại cũng là quá nhiều đối với một người.</description>
    </item>
    <item>
      <title>[Book] Clean Code - Chapter 2</title>
      <link>https://phatcvo.github.io/blog/clean-code-chapter-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://phatcvo.github.io/blog/clean-code-chapter-2/</guid>
      <description>CHƯƠNG 2: NHỮNG CÁI TÊN RÕ NGHĨA - Viết bởi Tim Ottinger&#xA;Giới thiệu Những cái tên có ở khắp mọi nơi trong phần mềm. Chúng ta đặt tên cho các biến, các hàm, các đối số, các lớp và các gói của chúng ta. Chúng ta đặt tên cho những file mã nguồn và thư mục chứa chúng. Chúng ta đặt tên cho những file *.jar, file *.war,... Chúng ta đặt tên và đặt tên.</description>
    </item>
    <item>
      <title>[Book] Clean Code - Chapter 3</title>
      <link>https://phatcvo.github.io/blog/clean-code-chapter-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://phatcvo.github.io/blog/clean-code-chapter-3/</guid>
      <description>CHƯƠNG 3: HÀM Trong những buổi đầu của việc lập trình, chúng tôi soạn thảo các hệ thống câu lệnh và các chương trình con. Sau đó, trong thời đại của Fortran và PL/1, chúng tôi soạn thảo các hệ thống chương trình, chương trình con, và các hàm. Ngày nay, chỉ còn các hàm là tồn tại. Các hàm là những viên gạch xây dựng nên chương trình. Và chương này sẽ giúp bạn tạo nên những viên gạch chắc chắn cho chương trình của bạn.</description>
    </item>
    <item>
      <title>[Book] Clean Code - Chapter 4</title>
      <link>https://phatcvo.github.io/blog/clean-code-chapter-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://phatcvo.github.io/blog/clean-code-chapter-4/</guid>
      <description>CHƯƠNG 4: CƠM-MỪN &amp;ldquo;Đừng biến đống code gớm ghiếc của bạn thành comment - hãy viết lại nó&amp;rdquo;&#xA;- Brian W. Kernighan and P. J. Plaugher&#xA;Không gì hữu ích bằng một comment được đặt đúng chổ. Không gì có thể làm lộn xộn đống code của bạn, ngoại trừ những comment ngu xuẩn và dối trá. Và không gì có thể gây nguy hiểm bằng một comment cộc lốc từ đời nào và lại không đúng sự thật.</description>
    </item>
    <item>
      <title>[Book] Clean Code - Chapter 5</title>
      <link>https://phatcvo.github.io/blog/clean-code-chapter-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://phatcvo.github.io/blog/clean-code-chapter-5/</guid>
      <description>CHƯƠNG 5: ĐỊNH DẠNG CODE Khi mọi người tiến hành bảo dưỡng dự án, chúng tôi muốn họ ấn tượng bởi sự gọn gàng, nhất quán, và chú ý đến từng chi tiết mà chúng tôi đã tạo ra. Chúng tôi muốn họ choáng ngợp bởi sự ngăn nắp. Chúng tôi muốn họ phải bất ngờ khi xem qua các module. Chúng tôi muốn họ nhận thức được rằng chúng tôi chuyên nghiệp, và đây là sản phẩm được tạo ra bởi chuyên gia.</description>
    </item>
    <item>
      <title>[Book] Clean Code - Chapter 6</title>
      <link>https://phatcvo.github.io/blog/clean-code-chapter-6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://phatcvo.github.io/blog/clean-code-chapter-6/</guid>
      <description>CHƯƠNG 6: ĐỐI TƯỢNG VÀ CẤU TRÚC DỮ LIỆU Chúng tôi có lý do khi muốn giữ các biến là private. Chúng tôi không muốn ai đó phụ thuộc vào chúng. Chúng tôi muốn giữ sự tự do để thay đổi kiểu (dữ liệu) hoặc thực hiện các hành động tùy biến. Nhưng sau đó thì sao? Rất nhiều lập trình viên tự động thêm getter và setter vào class của họ, chẳng khác gì thay đổi các biến private thành public.</description>
    </item>
    <item>
      <title>[Book] Clean Code - Chapter 7</title>
      <link>https://phatcvo.github.io/blog/clean-code-chapter-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://phatcvo.github.io/blog/clean-code-chapter-7/</guid>
      <description>Chaper 07: Xử lý lỗi Michael Feathers Có vẻ kỳ lạ khi lại có một phần về xử lý lỗi trong một cuốn sách về mã sạch. Xử lý lỗi chỉ là một trong những việc mà tất cả chúng ta phải làm khi lập trình. Đầu vào có thể bất thường và thiết bị có thể bị lỗi. Nói tóm lại, mọi thứ đều có thể xảy ra sai sót, và khi chúng xảy ra, chúng ta với tư cách là người lập trình có trách nhiệm đảm bảo rằng mã của chúng ta thực hiện những gì nó cần làm.</description>
    </item>
    <item>
      <title>[Book] Clean Code - Chapter 8</title>
      <link>https://phatcvo.github.io/blog/clean-code-chapter-8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://phatcvo.github.io/blog/clean-code-chapter-8/</guid>
      <description>Ranh giới bởi James Grenning Chúng ta hiếm khi kiểm soát hoàn toàn các phần mềm trong hệ thống của mình. Đôi khi chúng ta mua gói của bên thứ ba hoặc sử dụng mã nguồn mở. Những lần khác, chúng ta phụ thuộc vào các nhóm trong công ty để sản xuất các thành phần hoặc hệ thống con. Bằng cách nào đó, chúng ta phải tích hợp các mã ngoài này với mã riêng của chúng ta một cách rõ ràng.</description>
    </item>
    <item>
      <title>[Book] Clean Code - Chapter 9</title>
      <link>https://phatcvo.github.io/blog/clean-code-chapter-9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://phatcvo.github.io/blog/clean-code-chapter-9/</guid>
      <description>Kiểm tra đơn vị Nghề của chúng ta đã đi một chặng đường dài trong mười năm qua. Năm 1997, không ai nghe nói về Phát triển theo hướng kiểm tra. Đối với đại đa số nhà phát triển, các bài kiểm tra đơn vị là những đoạn mã ngắn được viết để đảm bảo chương trình “hoạt động”. Chúng tôi sẽ cẩn thận viết các lớp và phương thức của mình rồi sau đó tạo ra một số mã đặc biệt để kiểm tra chúng.</description>
    </item>
  </channel>
</rss>
